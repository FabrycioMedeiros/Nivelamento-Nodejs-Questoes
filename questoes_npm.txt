Perguntas Conceituais: NPM

1.  O que é o npm e qual é a sua função principal no ecossistema Node.js?
npm (Node Package Manager) é uma ferramenta fundamental no ecossistema Node.js, onde sua função principal é facilitar a instalação, gerenciamento e distribuição de pacotes de software (bibliotecas e módulos) escritos em JavaScript. 

2.	Como você verifica a versão atual do npm instalada no seu sistema?
No terminal ou prompt de comando e digite o seguinte comando:
npm -v 
Que será exibida a versão instalada no sistema.

3.	Qual é o comando utilizado para instalar pacotes npm em um projeto Node.js?
No terminal inicie com o comando:
npm install nomeDoPacote - Para instalar um pacote de terceiros, isso baixará o pacote e suas dependências para a pasta node_modules no seu projeto.
npm install nomeDoPacote --save ou npm install nomeDoPacote –S - Para salvar a dependência, para que outras pessoas que trabalham no projeto possam instalá-la facilmente. 

4.	Como você lista todos os pacotes instalados em um projeto Node.js?
É utilizado o comando, no terminal:
npm list

5.	O que é o arquivo package.json e qual é o seu propósito em um projeto Node.js?
É um arquivo de configuração fundamental em um projeto Node.js, que desempenha papel central no gerenciamento de dependências, configuração do projeto e na documentação das informações relacionadas ao projeto, descrevendo suas particularidades temos:.
Gestão de Dependências - Uma das funções mais importantes do package.json é listar todas as dependências do projeto. Isso inclui pacotes npm que o projeto utiliza para funcionar corretamente. 
Scripts Personalizados - Podemos definir scripts personalizados que automatizam tarefas comuns relacionadas ao projeto, como a execução de testes, a compilação de código, a inicialização de servidores, entre outros. 
Metadados do Projeto - Contém metadados do projeto, como o nome do projeto, a versão, uma descrição, o autor e informações de licença. 
Configuração do Projeto - Pode incluir configurações específicas do projeto, como variáveis de ambiente, configurações de construção ou qualquer outra informação necessária para executar o projeto em diferentes ambientes.
Resolução de Conflitos de Versão - Também pode incluir informações sobre como as dependências devem ser tratadas em termos de versão. 
Facilitação de Compartilhamento e Colaboração - Torna mais fácil compartilhar seu projeto com outros desenvolvedores. 

6.	Quais são as diferenças entre os comandos npm install e npm install --save?
npm install nomeDoPacote 
•	comando usado para instalar pacotes npm em um projeto.
•	Os pacotes são instalados na pasta node_modules do projeto, mas o arquivo package.json não é atualizado automaticamente.
•	As dependências instaladas não são adicionadas automaticamente à lista de dependências do projeto no arquivo package.json.

npm install nomeDoPacote --save ou npm install nomeDoPacote –S(forma abreviada) 
•	É usado para instalar pacotes npm em um projeto.
•	Os pacotes são instalados na pasta node_modules, e o arquivo package.json é atualizado automaticamente para incluir o pacote como uma dependência do projeto.
•	As dependências instaladas são adicionadas automaticamente à lista de dependências do projeto no arquivo package.json.
Obs: A partir do npm versão 5.0.0 e superior, a opção --save não é mais necessária, é feita a inclusão automática das dependências no package.json por padrão quando você simplesmente usa o npm install package-name.

7.	Como você remove um pacote específico que não é mais necessário em um projeto Node.js?
npm uninstall nomeDoPacote - Para remover um pacote específico que não é mais necessário em um projeto.
npm uninstall nomeDoPacote --save - Para remover o pacote e também atualizar automaticamente o arquivo package.json.

8.	O que é um pacote global npm e como você instala um pacote globalmente?
É um pacote instalado no nível do sistema, e não em um projeto Node.js específico, são geralmente ferramentas e utilitários que disponibilizam globalmente no seu sistema para uso em vários projetos ou para executar comandos diretamente a partir do terminal ou prompt de comando..
Para instalar um pacote global, usamos o comando:
 npm install -g (ou npm install --global) nomeDoPacote

9.  Qual é o comando para atualizar todos os pacotes em um projeto Node.js para suas versões mais recentes?
Para atualizar utilizamos o comando:

npm update 

// atualiza todos os pacotes no seu projeto Node.js para as versões mais recentes permitidas pelas restrições de versão definidas no arquivo package.json.
Temos tambem o codig:

yarn upgrade // que também realizará a mesma atualização

10.	 Como você lida com conflitos de versões de pacotes npm em um projeto?
Para resolver conflitos de versões devemos seguir boas práticas de gerenciamento de dependências e usarmos as ferramentas corretas, abaixo alguns exemplos de como conflitoa podem ser resolvidos:
Aqui estão algumas estratégias para lidar com esses conflitos:

• Utilizando um gerenciador de dependências como o npm ou o yarn. Ambos têm mecanismos internos para resolver conflitos de versões automaticamente.

• Mantendo seus pacotes e dependências atualizados para evitar conflitos. 

• No package.json, especifique as versões exatas ou intervalos de versões que você sabe que são compatíveis com seu projeto.

• Em conflitos de versões que não podem ser resolvidos automaticamente, podemos tentar resolvê-los manualmente:
-Atualizando manualmente a versão do pacote em conflito em seu package.json para uma versão compatível com todas as dependências.
- Verificacando se há atualizações dos pacotes dependentes que possam resolver o conflito.

• Executar npm ls ou yarn list para listar as dependências e visualizar os conflitos de versões.

• Verificar se o pacote em conflito é uma dependência direta ou uma dependência de pares (peer dependency). 
- Dependências de pares não são instaladas automaticamente e precisam ser gerenciadas manualmente no seu projeto.

• Ferramentas como ESLint e TSLint podem ajudar a identificar problemas de compatibilidade de versões em seu código e sugerir correções.

• Manter o código sob controle de versão (Git) e executar testes automatizados regularmente para garantir que as atualizações de pacotes não quebrem seu aplicativo.

• Manter sempre atualizado sobre as mudanças de versões de pacotes visitando a documentação oficial dos pacotes e as notas de lançamento.

• Participar de fóruns de desenvolvedores, grupos de discussão e comunidades online relacionadas ao Node.js e às bibliotecas.

11.	 O que é o comando npm init e como ele é usado para iniciar um novo projeto Node.js?
Comando usado para inicializar um novo projeto Node.js criando um arquivo package.json. 
O package.json é um arquivo de manifesto que descreve o projeto, suas dependências, scripts de build, autor e outras informações relevantes, é parte fundamental de qualquer projeto Node.js, pois ajuda a gerenciar as dependências e as configurações do projeto. 
Para usarmos seguimos os seguintes passos:

• Abrir o terminal ou prompt de comando no diretório onde deseja criar seu novo projeto Node.js.

• Execute o comando 

- npm init seguido ou não do argumento --yes (ou -y) para pular todas as perguntas interativas e aceitar as configurações padrão.

- Após isso, o comando criará um arquivo package.json no diretório atual.
- O arquivo package.json é fundamental para gerenciar as dependências do projeto e facilitar a distribuição e colaboração no código, certifique-se de sempre mantê-lo atualizado à medida que você adiciona ou remove dependências do seu projeto Node.js.
- Podemos editar o arquivo package.json manualmente para adicionar ou modificar informações conforme necessário, como as dependências do projeto.

• Dependências, são instaladas com o comando:
 
npm install nomeDoPacote

• Isso instalará o pacote solicitado e adicionará automaticamente uma entrada na seção de dependências do arquivo package.json.

12.	O que é o arquivo package-lock.json e qual é o seu papel na gestão de dependências em um projeto Node.js?
É um arquivo gerado automaticamente pelo npm (Node Package Manager) para registrar e controlar as versões exatas das dependências de um projeto Node.js, que desempenha papel fundamental na gestão de dependências, especialmente quando se trata de garantir a reprodutibilidade e consistência das versões das dependências em diferentes ambientes de desenvolvimento e implantação.

Abaixo estão algumas informações sobre o arquivo package-lock.json:

• Contém informações detalhadas sobre todas as dependências do projeto, incluindo seus nomes, versões exatas e URLs dos pacotes, que especifica as versões exatas das dependências que foram instaladas no momento da criação do arquivo.

• Garantir que um projeto tenha a mesma configuração de dependências, independentemente do ambiente em que é instalado. 

• É usado para resolver conflitos de versões entre dependências, pois define explicitamente quais versões de pacotes devem ser instaladas, resolvendo qualquer ambiguidade que possa surgir quando diferentes dependências solicitam versões conflitantes de um mesmo pacote.

• Ajuda a melhorar o desempenho das instalações de pacotes, uma vez que permite que o npm evite a necessidade de resolver as dependências toda vez que o projeto é instalado. 

• É frequentemente commitado ao controle de versão (Git) para que outros desenvolvedores que trabalham no mesmo projeto tenham acesso às mesmas versões de dependências.

• O package-lock.json deve ser adicionado ao arquivo .gitignore ou equivalente para que não seja alterado acidentalmente durante a colaboração. As versões de pacotes devem ser atualizadas de forma controlada usando comandos npm ou yarn.
